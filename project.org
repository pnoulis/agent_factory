* Task Board
** DONE Player register() fn should need a password as input.
CLOSED: [2024-01-28 Sun 15:52]
** TODO Task should invoke onSuccess(),onFailure() before postask middleware
** Task template
*** TODO Object schema for req/res backend topic payload
*** TODO Implement backend api topic call
*** TODO Implement Task and Command
*** TODO Document the req/res payload
** Entity template
**** TODO normalization
**** TODO random
**** TODO tobject
**** TODO fill
** DONE Implement writsband scan
CLOSED: [2024-01-28 Sun 15:52]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-28 Sun 15:52]
*** DONE Implement backend api topic call
CLOSED: [2024-01-28 Sun 15:52]
*** DONE Implement Task and Command
CLOSED: [2024-01-28 Sun 15:52]
*** DONE Document the req/res payload
CLOSED: [2024-01-28 Sun 15:52]
** DONE Implement wristband register
CLOSED: [2024-01-28 Sun 17:15]
*** DONE Object schema for req/res backend topic payload
*** DONE Implement backend api topic call
*** DONE Implement Task and Command
CLOSED: [2024-01-28 Sun 15:50]
*** DONE Document the req/res payload
CLOSED: [2024-01-28 Sun 15:50]
** TODO Implement wristband deregister
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-28 Sun 17:15]
*** DONE Implement backend api topic call
CLOSED: [2024-01-28 Sun 17:27]
*** DONE Implement Task and Command
CLOSED: [2024-01-28 Sun 17:27]
*** DONE Document the req/res payload
CLOSED: [2024-01-28 Sun 17:33]
** DONE Implement getWristbandInfo
CLOSED: [2024-01-28 Sun 17:27]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-28 Sun 16:09]
*** DONE Implement backend api topic call
CLOSED: [2024-01-28 Sun 17:09]
*** DONE Implement Task and Command
CLOSED: [2024-01-28 Sun 17:09]
*** DONE Document the req/res payload
CLOSED: [2024-01-28 Sun 17:09]
** TODO Team entity
**** TODO normalization
**** TODO random
**** TODO tobject
**** TODO fill
** TODO Team Roster
**** TODO normalization
**** TODO random
**** TODO tobject
**** TODO fill

** DONE Implement list Registered Players
CLOSED: [2024-01-30 Tue 23:04]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-30 Tue 22:02]
*** DONE Implement backend api topic call
CLOSED: [2024-01-30 Tue 21:41]
*** DONE Implement task and Command
CLOSED: [2024-01-30 Tue 23:04]
*** DONE Document the req/res payload
CLOSED: [2024-01-30 Tue 21:41]
**** Backend response
#+begin_src js
  {
    timestamp: 1706642934817,
    result: 'OK',
    players: [
      {
        username: 'Merry_2mpmnxcgv1s',
        name: 'Merry',
        surname: 'compassionate',
        email: 'Merry@gmail.com',
        wristbandMerged: false,
        wristband: null
      },
      {
        username: 'Wormtongue_klagnkjxqla',
        name: 'Wormtongue',
        surname: 'jovial',
        email: 'Wormtongue@gmail.com',
        wristbandMerged: false,
        wristband: { wristbandNumber: 230, wristbandColor: 3, active: true }
      },
      {
        username: '6t3o5ds227u',
        name: null,
        surname: null,
        email: null,
        wristbandMerged: false,
        wristband: null
      },
      {
        username: 'Elrond_6ofeexn83ma',
        name: 'Elrond',
        surname: 'vigilant',
        email: 'Elrond@gmail.com',
        wristbandMerged: true,
        wristband: { wristbandNumber: 231, wristbandColor: 4, active: true }
      },
      {
        username: 'ppthree',
        name: 'yolothree',
        surname: 'ggthree',
        email: 'ggthree@gmail.com',
        wristbandMerged: false,
        wristband: null
      },
    ]
  }
#+end_src
**** After Player.normalize()
#+begin_src js

  // Player.normalize(backend_res, { depth: 1, defaultState: 'registered' })
  const normalized = [
    {
      username: 'Merry_2mpmnxcgv1s',
      name: 'Merry',
      surname: 'compassionate',
      email: 'Merry@gmail.com',
      state: 'registered',
      wristband: { id: null, color: '', colorCode: null, state: 'unpaired' }
    },
    {
      username: 'Wormtongue_klagnkjxqla',
      name: 'Wormtongue',
      surname: 'jovial',
      email: 'Wormtongue@gmail.com',
      state: 'registered',
      wristband: { id: 230, color: 'green', colorCode: 3, state: 'paired' }
    },
    {
      username: '6t3o5ds227u',
      name: '',
      surname: '',
      email: '',
      state: 'registered',
      wristband: { id: null, color: '', colorCode: null, state: 'unpaired' }
    },
    {
      username: 'Elrond_6ofeexn83ma',
      name: 'Elrond',
      surname: 'vigilant',
      email: 'Elrond@gmail.com',
      state: 'inTeam',
      wristband: { id: 231, color: 'yellow', colorCode: 4, state: 'paired' }
    },
    {
      username: 'ppthree',
      name: 'yolothree',
      surname: 'ggthree',
      email: 'ggthree@gmail.com',
      state: 'registered',
      wristband: { id: null, color: '', colorCode: null, state: 'unpaired' }
    }
  ]
#+end_src
*** DONE Verify Player.normalize() and Wristband.normalize()
CLOSED: [2024-01-30 Tue 21:41]
** DONE Implement list Registered Players with a Wristband
CLOSED: [2024-01-30 Tue 23:39]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-30 Tue 23:38]
*** DONE Implement backend api topic call
CLOSED: [2024-01-30 Tue 23:24]
*** DONE Implement Task and Command
CLOSED: [2024-01-30 Tue 23:38]
*** DONE Document the req/res payload
CLOSED: [2024-01-30 Tue 23:28]
**** Backend response
#+begin_src js
  const response = {
    timestamp: 1706649848057,
    result: 'OK',
    players: [
      {
        username: 'Gilgalad_wsai1ooow3',
        name: 'Gilgalad',
        surname: 'sweet',
        email: 'Gilgalad@gmail.com',
        wristbandMerged: false,
        wristband: { wristbandNumber: 232, wristbandColor: 4, active: true }
      },
      {
        username: 'Gandalf_deil7sv8j4c',
        name: 'Gandalf',
        surname: 'busy',
        email: 'Gandalf@gmail.com',
        wristbandMerged: false,
        wristband: { wristbandNumber: 233, wristbandColor: 4, active: true }
      },
      {
        username: 'Galadriel_12k3dw52kkhi',
        name: 'Galadriel',
        surname: 'jovial',
        email: 'Galadriel@gmail.com',
        wristbandMerged: false,
        wristband: { wristbandNumber: 235, wristbandColor: 5, active: true }
      }
    ]
  }
#+end_src
**** After Player.normalize()
#+begin_src js
  // Player.normalize(response.players, { depth: 1, state: "registered" })
  const normalize = [
    {
      username: 'Gilgalad_wsai1ooow3',
      name: 'Gilgalad',
      surname: 'sweet',
      email: 'Gilgalad@gmail.com',
      state: 'registered',
      wristband: { id: 232, color: 'yellow', colorCode: 4, state: 'paired' }
    },
    {
      username: 'Gandalf_deil7sv8j4c',
      name: 'Gandalf',
      surname: 'busy',
      email: 'Gandalf@gmail.com',
      state: 'registered',
      wristband: { id: 233, color: 'yellow', colorCode: 4, state: 'paired' }
    },
    {
      username: 'Galadriel_12k3dw52kkhi',
      name: 'Galadriel',
      surname: 'jovial',
      email: 'Galadriel@gmail.com',
      state: 'registered',
      wristband: { id: 235, color: 'blue', colorCode: 5, state: 'paired' }
    }
  ]
  #+end_src
*** DONE Verify Player.normalize() and Wristband.normalize()
CLOSED: [2024-01-30 Tue 23:39]
** DONE Implement list Packages
CLOSED: [2024-01-30 Tue 23:54]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-30 Tue 21:13]
*** DONE Implement backend api topic call
CLOSED: [2024-01-30 Tue 21:12]
*** DONE Implement Task and Command
CLOSED: [2024-01-30 Tue 21:12]
*** DONE Document the req/res payload
CLOSED: [2024-01-30 Tue 20:53]
**** Backend response
#+begin_src js
  const response = {
    timestamp: 1706640606387,
    result: 'OK',
    packages: [
      { name: 'Per Mission 5', amount: 5, type: 'mission', cost: 50 },
      {
        name: 'Per Mission 10',
        amount: 10,
        type: 'mission',
        cost: 100
      },
      {
        name: 'Per Mission 15',
        amount: 15,
        type: 'mission',
        cost: 150
      },
      {
        name: 'Per Mission 20',
        amount: 20,
        type: 'mission',
        cost: 200
      },
      { name: 'Per Time 30', amount: 30, type: 'time', cost: 50 },
      { name: 'Per Time 60', amount: 60, type: 'time', cost: 100 },
      { name: 'Per Time 90', amount: 90, type: 'time', cost: 150 },
      { name: 'Per Time 120', amount: 120, type: 'time', cost: 200 }
    ]
  }
#+end_src
**** After Package.normalization()
#+begin_src js
  // Packege.normalize(packages, { state: "registered" });
  const normalized = [
    {
      id: null,
      name: 'Per Mission 5',
      type: 'mission',
      amount: 5,
      cost: 50,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    },
    {
      id: null,
      name: 'Per Mission 10',
      type: 'mission',
      amount: 10,
      cost: 100,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    },
    {
      id: null,
      name: 'Per Mission 15',
      type: 'mission',
      amount: 15,
      cost: 150,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    },
    {
      id: null,
      name: 'Per Mission 20',
      type: 'mission',
      amount: 20,
      cost: 200,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    },
    {
      id: null,
      name: 'Per Time 30',
      type: 'time',
      amount: 30,
      cost: 50,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    },
    {
      id: null,
      name: 'Per Time 60',
      type: 'time',
      amount: 60,
      cost: 100,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    },
    {
      id: null,
      name: 'Per Time 90',
      type: 'time',
      amount: 90,
      cost: 150,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    },
    {
      id: null,
      name: 'Per Time 120',
      type: 'time',
      amount: 120,
      cost: 200,
      t_start: null,
      t_end: null,
      remainder: null,
      state: 'registered'
    }
  ]
#+end_src

*** DONE Verify Package.normalize()
CLOSED: [2024-01-30 Tue 20:58]
** DONE Implement list Cashiers
CLOSED: [2024-01-31 Wed 15:43]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-31 Wed 15:37]
*** DONE Implement backend api topic call
CLOSED: [2024-01-31 Wed 15:33]
*** DONE Implement Task and Command
CLOSED: [2024-01-31 Wed 15:43]
*** DONE Document the req/res payload
CLOSED: [2024-01-31 Wed 15:33]
**** Backend request
#+begin_src js
  {
    timestamp: 1706707779283,
  }
#+end_src
**** Backend response
#+begin_src js
  {
    timestamp: 1706707779283,
    result: 'OK',
    cashiers: [
      { id: 1, username: 'pavlos', email: 'pavlosTester123@gmail.com' },
      { id: 3, username: 'tt', email: 'tt@gmail.com' }
    ]
  }
#+end_src
**** No Normalization required

** DONE Implement list Devices
CLOSED: [2024-01-31 Wed 16:19]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-31 Wed 16:17]
*** DONE Implement backend api topic call
CLOSED: [2024-01-31 Wed 16:17]
*** DONE Implement Task and Command
CLOSED: [2024-01-31 Wed 16:17]
*** DONE Document the req/res payload
CLOSED: [2024-01-31 Wed 16:17]
**** Backend request
#+begin_src js
  {
    timestamp: 1706709130813,
  }
#+end_src
**** Backend response
#+begin_src js
  {
  timestamp: 1706709130813,
  result: 'OK',
  devices: [
    {
      deviceType: 'SCOREBOARD_SCREEN',
      roomType: 'SCOREBOARD1',
      deviceId: 'scor1',
      macAddress: null,
      ipAddress: null,
      bootedTimestamp: 1702243701606
    },
    {
      deviceType: 'SCOREBOARD_SCREEN',
      roomType: 'SCOREBOARD2',
      deviceId: 'scor2',
      macAddress: null,
      ipAddress: null,
      bootedTimestamp: 1702243701625
    },
    {
      deviceType: 'REGISTRATION_SCREEN',
      roomType: 'ADMINISTRATION1',
      deviceId: '001',
      macAddress: null,
      ipAddress: null,
      bootedTimestamp: 1706707719741
    },
    {
      deviceType: 'RPI_READER',
      roomType: 'ADMINISTRATION1',
      deviceId: 'ADMINISTRATION1Reader',
      macAddress: null,
      ipAddress: null,
      bootedTimestamp: 1705889333198
    }
  ]
}
#+end_src
**** No Normalization
** TODO Implement list Scoreboard Devices
*** TODO Object schema for req/res backend topic payload
*** TODO Implement backend api topic call
*** TODO Implement Task and Command
*** TODO Document the req/res payload
*** TODO Verify Device.normalize()
** TODO Implement list Scoreboard Device Views
*** TODO Object schema for req/res backend topic payload
*** TODO Implement backend api topic call
*** TODO Implement Task and Command
*** TODO Document the req/res payload
*** TODO Verify Device.normalize()
** TODO ImpLement list Scoreboard
*** TODO Object schema for req/res backend topic payload
*** TODO Implement backend api topic call
*** TODO Implement Task and Command
*** TODO Document the req/res payload
*** TODO Verify Team.normalize()
** DONE Implement list Teams
CLOSED: [2024-01-31 Wed 15:09]
*** DONE Object schema for req/res backend topic payload
CLOSED: [2024-01-31 Wed 15:09]
*** DONE Implement backend api topic call
CLOSED: [2024-01-31 Wed 08:57]
*** DONE Implement Task and Command
CLOSED: [2024-01-31 Wed 15:09]
*** DONE Document the req/res payload
CLOSED: [2024-01-30 Tue 10:28]
**** DONE A team with all Possible Permutations of players and packages
CLOSED: [2024-01-31 Wed 10:26]
***** Backend response
#+begin_src js
  {
    name: 'friendly_Eomer_c3d',
    totalPoints: 0,
    teamState: 'FINISHED',
    created: 1706472198904,
    lastRegisterAttempt: null,
    currentRoster: {
      version: 1,
      players: [
        {
          username: 'test1',
          wristbandNumber: null,
          wristbandColor: null
        },
        {
          username: 'test2',
          wristbandNumber: 1,
          wristbandColor: 2,
        },
        {
          username: "test3",
          wristbandNumber: 1,
          wristbandColor: null,
        },
        {
          username: "test4",
          wristbandNumber: null,
          wristbandColor: 2,
        },
      ]
    },
    roomType: null,
    packages: [
      { // missions registered
        id: 1,
        name: 'Per Mission 5',
        cost: null,
        started: null,
        ended: null,
        missions: 5,
        missionsPlayed: 0,
        active: false
      },
      { // missions being played
        id: 2,
        name: 'Per Mission 10',
        cost: null,
        started: 1706686189153,
        ended: null,
        missions: 10,
        missionsPlayed: 5,
        active: true
      },
      { // missions completed
        id: 3,
        name: 'Per Mission 20',
        cost: null,
        started: 1706686189153,
        ended: 1706686199999,
        missions: 20,
        missionsPlayed: 20,
        active: false,
      },
      { // time registered
        id: 8,
        name: 'Per Time 30',
        cost: null,
        started: null,
        ended: null,
        duration: 1800,
        paused: false,
        active: false
      },
      { // time being played
        id: 5,
        name: 'Per Time 60',
        cost: null,
        started: 1706685129723,
        ended: null,
        duration: 5400,
        paused: false,
        active: true
      },
      { // time finished
        id: 3,
        name: 'Per Time 90',
        cost: null,
        started: 1706473426225,
        ended: 1706478843795,
        duration: 1800,
        paused: false,
        active: false
      },
    ]
  }
#+end_src
***** After Team.normalize()
#+begin_src js
  // Team.normalize(response, { depth: 2 });
  {
    name: 'friendly_Eomer_c3d',
    t_created: 1706472198904,
    points: 0,
    packages: [
      {
        id: 1,
        name: 'Per Mission 5',
        type: 'mission',
        amount: 5,
        cost: 0,
        t_start: null,
        t_end: null,
        remainder: 5,
        state: 'registered'
      },
      {
        id: 2,
        name: 'Per Mission 10',
        type: 'mission',
        amount: 10,
        cost: 0,
        t_start: 1706686189153,
        t_end: null,
        remainder: 5,
        state: 'playing'
      },
      {
        id: 3,
        name: 'Per Mission 20',
        type: 'mission',
        amount: 20,
        cost: 0,
        t_start: 1706686189153,
        t_end: 1706686199999,
        remainder: 0,
        state: 'completed'
      },
      {
        id: 8,
        name: 'Per Time 30',
        type: 'time',
        amount: 30,
        cost: 0,
        t_start: null,
        t_end: null,
        remainder: 0,
        state: 'registered'
      },
      {
        id: 5,
        name: 'Per Time 60',
        type: 'time',
        amount: 90,
        cost: 0,
        t_start: 1706685129723,
        t_end: null,
        remainder: 0,
        state: 'playing'
      },
      {
        id: 3,
        name: 'Per Time 90',
        type: 'time',
        amount: 30,
        cost: 0,
        t_start: 1706473426225,
        t_end: 1706478843795,
        remainder: 0,
        state: 'completed'
      }
    ],
    roster: [
      {
        username: 'test1',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: null, color: '', colorCode: null, state: 'unpaired' }
      },
      {
        username: 'test2',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: 1, color: 'purple', colorCode: 2, state: 'paired' }
      },
      {
        username: 'test3',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: 1, color: '', colorCode: null, state: 'paired' }
      },
      {
        username: 'test4',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: null, color: 'purple', colorCode: 2, state: 'unpaired' }
      }
    ],
    state: 'registered'
  }
#+end_src
**** DONE RUNNING PACKAGE Team
CLOSED: [2024-01-31 Wed 13:04]
***** Backend response
#+begin_src js
  {
    name: 'inspiring_Goldberry',
    totalPoints: 0,
    teamState: 'PACKAGE_RUNNING',
    created: 1706684656827,
    lastRegisterAttempt: null,
    currentRoster: {
      version: 1,
      players: [
        {
          username: 'Sauron_0h96h9q4xixv',
          wristbandNumber: 241,
          wristbandColor: 2
        },
        { username: 'ppone', wristbandNumber: 240, wristbandColor: 1 }
      ]
    },
    roomType: null,
    packages: [
      {
        id: 5,
        name: 'Per Time 90',
        cost: null,
        started: 1706685129723,
        ended: null,
        duration: 5400,
        paused: false,
        active: true
      }
    ]
  }
#+end_src
***** After Team.normalize()
#+begin_src js
  // Team.normalize(response, { depth: 2 })
  {
    name: 'inspiring_Goldberry',
    t_created: 1706684656827,
    points: 0,
    packages: [
      {
        id: 5,
        name: 'Per Time 90',
        type: 'time',
        amount: 90,
        cost: 0,
        t_start: 1706685129723,
        t_end: null,
        remainder: 0,
        state: 'playing'
      }
    ],
    roster: [
      {
        username: 'Sauron_0h96h9q4xixv',
        name: '',
        surname: '',
        email: '',
        state: 'playing',
        wristband: { id: 241, color: 'purple', colorCode: 2, state: 'paired' }
      },
      {
        username: 'ppone',
        name: '',
        surname: '',
        email: '',
        state: 'playing',
        wristband: { id: 240, color: 'red', colorCode: 1, state: 'paired' }
      }
    ],
    state: 'playing'
  }
#+end_src
**** DONE FINISHED Team
CLOSED: [2024-01-31 Wed 10:36]
***** Backend response
#+begin_src js
    {
    name: 'friendly_Eomer_c3d',
    totalPoints: 0,
    teamState: 'FINISHED',
    created: 1706472198904,
    lastRegisterAttempt: null,
    currentRoster: {
      version: 1,
      players: [
        {
          username: '0a5sh6llqf3v',
          wristbandNumber: null,
          wristbandColor: null
        },
        {
          username: '3q0vtxg1o7s',
          wristbandNumber: null,
          wristbandColor: null
        }
      ]
    },
    roomType: null,
    packages: [
      {
        id: 1,
        name: 'Per Mission 10',
        cost: null,
        started: 1706472302416,
        ended: 1706475903814,
        missions: 10,
        missionsPlayed: 0,
        active: false
      }
    ]
  }
#+end_src
***** After Team.normalize()
#+begin_src js
  // Team.normalize(response, { depth: 2 });
  {
    name: 'friendly_Eomer_c3d',
    t_created: 1706472198904,
    points: 0,
    packages: [
      {
        id: 1,
        name: 'Per Mission 10',
        type: 'mission',
        amount: 10,
        cost: 0,
        t_start: 1706472302416,
        t_end: 1706475903814,
        remainder: 10,
        state: 'completed'
      }
    ],
    roster: [
      {
        username: '0a5sh6llqf3v',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: null, color: '', colorCode: null, state: 'unpaired' }
      },
      {
        username: '3q0vtxg1o7s',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: null, color: '', colorCode: null, state: 'unpaired' }
      }
    ],
    state: 'registered'
  }
#+end_src
**** DONE PENDING PACKAGE Team
CLOSED: [2024-01-31 Wed 10:26]
***** Backend response
#+begin_src js
  {
  name: 'inspiring_Goldberry',
  totalPoints: 0,
  teamState: 'PENDING_PACKAGES',
  created: 1706684656827,
  lastRegisterAttempt: null,
  currentRoster: {
    version: 1,
    players: [
      { username: 'ppone', wristbandNumber: 240, wristbandColor: 1 },
      {
        username: 'Sauron_0h96h9q4xixv',
        wristbandNumber: 241,
        wristbandColor: 2
      }
    ]
  },
  roomType: null,
  packages: []
}
#+end_src
***** After Team.normalize()
#+begin_src js
  // Team.normalize(response, { depth: 2 });
  {
    name: 'inspiring_Goldberry',
    t_created: 1706684656827,
    points: 0,
    packages: [],
    roster: [
      {
        username: 'ppone',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: 240, color: 'red', colorCode: 1, state: 'paired' }
      },
      {
        username: 'Sauron_0h96h9q4xixv',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: 241, color: 'purple', colorCode: 2, state: 'paired' }
      }
    ],
    state: 'registered'
  }
#+end_src
**** DONE LOADED PACKAGE Team
CLOSED: [2024-01-31 Wed 10:27]
***** Backend response
#+begin_src js
    {
    name: 'inspiring_Goldberry',
    totalPoints: 0,
    teamState: 'LOADED_PACKAGES',
    created: 1706684656827,
    lastRegisterAttempt: null,
    currentRoster: {
      version: 1,
      players: [
        {
          username: 'Sauron_0h96h9q4xixv',
          wristbandNumber: 241,
          wristbandColor: 2
        },
        { username: 'ppone', wristbandNumber: 240, wristbandColor: 1 }
      ]
    },
    roomType: null,
    packages: [
      {
        id: 4,
        name: 'Per Mission 20',
        cost: null,
        started: null,
        ended: null,
        missions: 20,
        missionsPlayed: 0,
        active: false
      },
    ]
  }
#+end_src
***** After Team.normalize()
#+begin_src js
  // Team.normalize(response, { depth: 2 });
  {
    name: 'inspiring_Goldberry',
    t_created: 1706684656827,
    points: 0,
    packages: [
      {
        id: 4,
        name: 'Per Mission 20',
        type: 'mission',
        amount: 20,
        cost: 0,
        t_start: null,
        t_end: null,
        remainder: 20,
        state: 'registered'
      }
    ],
    roster: [
      {
        username: 'Sauron_0h96h9q4xixv',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: 241, color: 'purple', colorCode: 2, state: 'paired' }
      },
      {
        username: 'ppone',
        name: '',
        surname: '',
        email: '',
        state: 'inTeam',
        wristband: { id: 240, color: 'red', colorCode: 1, state: 'paired' }
      }
    ],
    state: 'registered'
  }
#+end_src
*** DONE Verify Team.normalize()
CLOSED: [2024-01-31 Wed 15:09]
* Communication between objects
The *afmachine* acts as the *Invoker* in the *Command* pattern. It is the
control center of the application. All actions that touch multiple modules of
the system are managed and directed towards those systems by the control center.

A command is an action that has to be carried out at some point in the future.
Each command may be comprised of multiple subtasks that need to be performed,
where order is important just like in the middleware pattern. Eeach subtask adds
or performs some kind of processing to the context passed along. When all
subtasks are finished the command is considered settled, (to borrow a promise
term) and interested parties are notified.

All entities that initiate commands are *clients* to the afmachine. It is rather
common for a client, to also be a target of the command; albeit at a later stage
of the command's lifecycle.

The modules that are supposed to process the command are the *targets* of the
command.

The management, monitoring and guidance of a command from its inception to its
end is handled by the afmachine. Specifically, clients do not initiate commands,
rather, they ask afmachine to do that for them.

Commands are composed of a queue of tasks that need to be executed. Each task is
intended to be consumed by a target.

* Afmachine

The Afmachine or afm for short is the control center of the application. It is a
singleton object. All browser windows and tabs share the SAME object.

All entities such as:

- the Player, Team..., ...Package
- A React Component
- The Administrator interacting with the application by clicking on buttons etc

make use of the afm API and are collectively known as clients. The afm API
is accessed through methods of the afm singleton object.

A standard interaction between a client and afm might go as follows:

- A client initiates an event through the use of a React component such as by
  clicking on a button.
  
- The React component invokes an API method of afm.
  
- Afm instantiates a Command
  
  The instance is returned synchronously.

  Each method of Afm represents some kind of Task such as logging in the
  administrator or pairing a Wristband. These tasks are defined at application
  initialization time. A Command represents an instance of running the Task.

  Some tasks return promises other tasks accept callbacks. If the Task is
  is designed to be called through an Entity usually expected to be called through an Entity it

- Afm enqueues the new Command.
  
  If the queue is empty the Command is immediately invoked. Otherwise it waits for its turn.
  
- Afm returns a Promise that will be fulfilled with the fulfillment value of the
  Command.
  
- Afm emits various events such as:

  onNewCommand
  commandStart

* Small core afm

creates commands
combines precmd postcmd pretask postask at the time of a Commands creation.
queues the command.
runs the command queue.



precommand


try {

try {
task()
targetCb(task);
} catch (err) {
targetCb(task)
}

task.onSuccess();

} catch (err) {

task.onFailure();

}

postask
}

precommand

* Afmachine new

The *afmachine* or *afm* for short is the control center of the application. It
is a singleton object. All browser windows and tabs share the same instance.

It's API is consumed by invoking any of the public methods of the *afm*
instance.

All API calls are stored under the directory:

/src/afmachine/tasks/*

Each of the statically defined API calls is a *Task*.

The primary function of *Afmachine* is to allow clients (such as a React
component or the UI in general) to build middleware chains around each Task.
This design model follows loosely the *command* design pattern. see
(https://en.wikipedia.org/wiki/Command_pattern)

Each time an API call is made *afm* creates a *Command* for the invoked *Task*.
A *Command* represents one instance of a running *Task*.

For example: If a client was to invoke an API call multiple times:

afm.listPkgs()
afm.listPkgs()
afm.listPkgs()

There would be 3 *Commands* created for the listPkgs *Task*.

Each *Command* carries with it a lot of information but fundamentally it
contains a sequence of functions (the middleware chain).

When a command is created it is placed into a queue by afm. The afm is
responsible for invoking each the commands in the queue in sequence (meaning in
order, waiting for the completion of one to carry on with the next).

For example: If a client was to invoke the API calls:

afm.loginCashier();
afm.listPkgs();
afm.logoutCashier();

There would be 3 *Commands* to run in the queue by *afm*.
It would proceed by running them in these order:

1. loginCashier()
2. listPkgs()
3. logoutCashier()

While each Command does run in order; an Error will not block the execution of
the next Command. Each Command is independent of the result of the previous one
unless the previous Command threw an unexpected Error in which case afm breaks
the chain of Commands or one of the hooks operating at the Command level
breaks the chain (more on that later).

Clients to afm can register functions that become part of a Command at either
the Task level or the Command level called hooks. Each hook must implement the
same signature.

function hook (context, next) {};

Command level hooks are provided with the afm instance as context.
Registering a Command level hook is done through the afm.on() method.

For exmaple:

// Register a hook to run before each command in the queue.
afm.on('precmd', (afm, next) => {});

// Register a hook to run after each command in the queue.
afm.on('postcmd', (afm, next) => {});

A Command level hook may interrupt the command sequence by not calling next();

Task level hooks are provided with the Command as context. (The Command also has
an afm property that is a reference to the afm instance). Registering a Task
level hook is done through the afm[$task].on() method.

For example:

// Register a hook to run before each Command for the listPkgs Task.
afm.listPkgs.on('precmd', (command, next) => {});

// Register a hook to run after each Command for the listPkgs Task.
afm.listPkgs.on('postcmd', (command, next) => {});

A Task level hook may interrupt the task sequence by not calling next(); The
task sequence is composed of:

The precmd Task level hooks + Task + postcmd Task level hooks

** Command
** Difference between events and hooks
A hook is a middleware function that becomes part of each Command. It is invoked
in the order it appears within the Command or Task sequence. As such it has no
control over its execution. It may never run because some previous hook
aborted the sequence.

Events on the other hand are not part any sequence. As such their handlers will
be invoked regardless of the sequnce itself.
** Invoking tasks (creating commands)
** Error handling

* Command Targets
Command Targets should not need to know if a command was aborted or not.
Command targets are notified through CALLBACKS not Promises.

A callback interface is used to prevent dangling promises.
In case a command is aborted or an error occurs in the application level the
callback shall never be called.

* Tasks
** List packages

* User stories
** Administrator toggles wristband pairing mode
In order for the administrator to be able to toggle a wristbands pairing mode
the following components are required:

UI component that handles a user click
A Player instance

The player hook is a wrapper to the Player class. The hook exposes the player's
interface to


* AFM Command pattern

target: entities
command: afm.task();
invoker: afm
client: UI, React Component


entities register through afm.



* <2024-01-24 Wed>
** Entities as the Command initializers
The Commander entities initiate commands.

Afm caches the Player that initiated a Command for a Task.
Afm creates a Command out of the Task.


The task middleware sequence contains:

Player.task
...middleware
Player.taskCompleted


*** The caches
A Map is used to contain each of the command initiating entities such as:

- player
- team
- wristband


Map.get('entityId')
Map.set('entityId', entity);

*** The middleware

if an error occurs anywhere in the middleware chain other than then postcmd 

** Task template
*** TODO Object schema for req/res backend topic payload
*** TODO Implement backend api topic call
*** TODO Implement Task and Command
*** TODO Document the req/res payload
** DONE Implement register player for fucks sake
CLOSED: [2024-01-25 Thu 14:25]

** DONE Implement player.pairWristband()
CLOSED: [2024-01-26 Fri 16:26]
** DONE Implement player.unpairWristband()
CLOSED: [2024-01-26 Fri 16:26]
** DONE Implement normalization algorithms
CLOSED: [2024-01-25 Thu 17:27]

** DONE Implement wristband toggle
CLOSED: [2024-01-26 Fri 16:26]

** TODO Implement wristband register
*** DONE Object schema for req/res backend topic payload
*** DONE Implement backend api topic call
*** DONE Implement Task and Command
CLOSED: [2024-01-28 Sun 15:50]
*** DONE Document the req/res payload
CLOSED: [2024-01-28 Sun 15:50]
** TODO Implement wristband unregister
*** TODO Object schema for req/res backend topic payload
*** TODO Implement backend api topic call
*** TODO Implement Task and Command
*** TODO Document the req/res payload
** TODO Implement wristband verify
*** TODO Object schema for req/res backend topic payload
*** TODO Implement backend api topic call
*** TODO Implement Task and Command

*** TODO Document the req/res payload

* <2024-01-27 Sat>

Merge the Commander and Target.

At the onset of a new command have the Commander register a middleware
function at the pretask stage for calling its own state function.


Tasks dependent on some client state should:

1. Cache the entity
2. Invoke the pre-task state[task] method as the first middleware. (with the
   latest copy of the cached entity)
3. Invoke the post-task state[task] method as the last middleware. (with the
   latest copy of the cached entity.

* Conventions

** Commands wrap their return value within an object

Commands never return an entity object, they return an object that contains the
entity or entities.

#+begin_src js
  // Instead of:
  const response = {
    username: "...",
    name: "...",
  }

  // This:
  const response = {
    player: {
      username: "...",
      name: "...",
    },
  }
#+end_src

* Packages
** Available packages
*** mission
#+begin_src js
  { name: 'Per Mission 15', amount: 15, type: 'mission', cost: 150 }
#+end_src
*** time
#+begin_src js
  { name: 'Per Time 30', amount: 30, type: 'time', cost: 50 }
#+end_src
** Active package
*** mission
#+begin_src js
  {
    id : 1,
    name : "Per Mission 10",
    cost : null,
    started : 1706472302416,
    ended : null,
    missions : 10,
    missionsPlayed : 0,
    active : true
  }
#+end_src
*** time
#+begin_src js
  {
    id : 3,
    name : "Per Time 30",
    cost : null,
    started : 1706473426225,
    ended : null,
    duration : 1800.000000000,
    paused : false,
    active : true
  }
    #+end_src
** Inactive package
*** mission
#+begin_src json
  "packages" : [{
    "id" : 2,
    "name" : "Per Mission 5",
    "cost" : null,
    "started" : null,
    "ended" : null,
    "missions" : 5,
    "missionsPlayed" : 0,
    "active" : false
  }]
#+end_src
*** time
#+begin_src json
  "packages" : [{
    "id" : 3,
    "name" : "Per Time 30",
    "cost" : null,
    "started" : null,
    "ended" : null,
    "duration" : 1800.000000000,
    "paused" : false,
    "active" : false
  }]
#+end_src




* Normalization functions
Normalization function are used to translate and merge entity objects.

They translate objects in backend form to frontend form.

For example:

A backend wrisband has the following properties:

wristbandNumber
wristbandColor

A frontend wristband has the following properties:

id
color
colorCode

The wristband normalization function is capable of taking a backend wristband
and translating it into a frontend wristband.

A second task normalization functions fulfill, is the merging of entity objects
in any form into a single object in frontend form.

For example:

Given a set of Wristbands:

[ { wristband1...}, { wristband2...} ]

The output would be:

{ wristbandInFrontendForm... }

Each normalization function accepts some standard options.

** Normalization options
*** Wristband
normalized
state
nullSupersede
defaultState
*** Player
normalized
depth
state
nullSupersede
defaultState
wristband options

at depth = 0 -> normalizes player
at depth = 1 -> normalizes player + wrisband
*** Package
normalized
state
nullSupersede
defaultState
*** Roster
normalized
depth
state
nullSupersede
defaultState
wristband options
{ wristband, ...playerOptions};

at depth = 0 -> normalizes players
at depth = 1 -> normalizes players + wristbands
*** Team
normalized
depth
state
nullSupersede
defaultState
player options
wristband options

at depth = 0 -> normalizes team
at depth = 1 -> normalizes teams + players
at depth = 2 -> normalizes teams + players + wristbands
*** GroupParty
normalized
depth
state
nullSupersede
defaultState
player options
wristband options

at depth = 0 -> normalizes teams
at depth = 1 -> normalizes teams + players
at depth = 2 -> normalizes teams + players + wrisbands

* ToObject Functions
The tobject() functions take an entity and return the entity as an object
striped down from all unecessary properties.


For example, given a Wristband instance:


WristbandInstance = {

afm: ...
states: {
   Unregistered: ...
   Registered: ...
}
state: "",
...
}

Would produce:

WristbandInstance.tobject()

{
   id: 0,
   color: "",
   colorCode: 0,
   state: "",
}

** tobject options
*** Wrisband
none
*** Package
none
*** Player
depth

at depth = 0 -> do not tobject() wrisband
at depth = 1 -> tobject() wristband

*** Roster
depth

at depth = 0 -> do not tobject() wristband
at depth = 1 -> tobject() wrisband

*** Team
depth

at depth = 0 -> do not tobject() players or wristbands or packages
at depth = 1 -> tobject() packages and players
at depth = 2 -> tobject() packages and players and wristbands

* Fill functions

the .fill() functions are used to quickly produce random entities.

** fill options
*** wristband
sources
*** Package
sources
*** player
sources
depth

at depth = 0 -> do not fill() wristband
at depth = 1 -> fill() wristband

*** Roster
size
sources
depth

at depth = 0 -> do not fill() wristband
at depth = 1 -> fill() wristband

*** Team
size
sources
depth

at depth = 0 -> do not fill() wristband, or players or packages
at depth = 1 -> fill() players and packages
at depth = 2 -> fill() players and packages and wristbands

