#!/usr/bin/make

##################################################
# Make config
##################################################
SHELL:=/usr/bin/bash
.DEFAULT_GOAL:= all
.DELETE_OR_ERROR:
.EXPORT_ALL_VARIABLES:
.SECONDEXPANSION:
.ONESHELL:

##################################################
# App description
##################################################
pkg_name=IN_PKG_NAME
pkg_version=IN_PKG_VERSION
pkg_vversion=IN_PKG_VVERSION
pkg_distname=IN_PKG_DISTNAME
api_version=IN_API_VERSION
api_vversion=IN_API_VVERSION

##################################################
# App directories
##################################################
srcdir_top=IN_SRCDIR
srcdir_top_abs=IN_SRCDIR_ABS
buildir_top=IN_CONFIGUREDIR
buildir_top_abs=IN_CONFIGUREDIR_ABS
buildir=IN_BUILDIR
buildir_abs=IN_BUILDIR_ABS
srcdir=$(srcdir_top)/src
srcdir_abs=$(srcdir_top_abs)/src
confdir=$(srcdir_top)/config
scriptdir=$(srcdir_top)/scripts
distdir=$(srcdir_top)/dist
distribution=$(distdir)/$(pkg_distname)


##################################################
# Tools and their configurations
##################################################
# node
node:=IN_NODE
# dotenv
dotenv=IN_DOTENV
dotenvdirs:=IN_CONFIG_ENVFILE $(srcdir_top)
dotenvfile:=$(srcdir_top_abs)/.env
loadenv=set -a; source $(dotenvfile)
# jq
jq:=IN_JQ
# esubild
esbuild=$(realpath $(srcdir_top)/node_modules/.bin/esbuild)
# pretty output
pretty_output=$(realpath $(srcdir_top)/node_modules/.bin/pretty)
# vite
vite=$(realpath $(srcdir_top)/node_modules/.bin/vite)
# vitest
vitest=$(realpath $(srcdir_top)/node_modules/.bin/vitest)
## run files in sequence
vitestflags=--no-file-parallelism

##################################################
# Misc
##################################################

##################################################
# io
##################################################
in_clickpie_server=$(srcdir_abs)/clickpie-server.js
out_clickpie_server=$(buildir_abs)/clickpie-server.js
out_client_log=$(srcdir_top_abs)/client.log
out_backend_log=$(srcdir_top_abs)/backend.log
out_test_log=$(srcdir_top_abs)/test.log

##################################################
# Path aliases
##################################################
alias_afm=$(srcdir)/afmachine

##################################################
# Default target
##################################################
all: build

##################################################
# Distribute
##################################################
dist: $(distribution)
	echo $(distribution)

dist.gz: $(distribution).tar.gz
dist.zip: $(distribution).zip

$(distribution).tar.gz: $(distribution)

# vctree := $(shell git ls-files --exclude-standard --cached)
$(distribution):
	-mkdir -p $(distribution) &>/dev/null
	for file in $(shell git ls-files --exclude-standard); do
		dirname=$${file%/*}
		[ -d $${dirname} ] && mkdir -p $(distribution)/$${dirname}
		ln --force --physical $${file} $(distribution)/$${dirname}
	done

##################################################
# Build
##################################################
build: buildclean dotenv | $(buildir_abs)
	$(loadenv)
	$(vite) build

buildclean: | $(buildir_abs)
	rm -rf $(buildir)/*

##################################################
# Deploy
##################################################
deploy:
ifeq (IN_DEPLOY_TARGET, afserver)
	ssh Mindtrap@afserver.local 'rmdir /s /q C:\laragon\www\administration'
	scp -C -r $(buildir) 'Mindtrap@afserver.local:C:/laragon/www/administration' &> /dev/null
else
	rsync -r $(buildir) /mnt/c/laragon/www &> /dev/null
endif

##################################################
# Start
##################################################
start: stop dotenv
	$(loadenv)
	cd backend && docker-compose up -d
	docker logs --follow backend-agentfactory-app-1 &> $(out_backend_log) &
	cd $(srcdir_top_abs)
ifdef daemon
	$(vite) serve --force &> $(out_client_log) &
else
	$(vite) serve --force &> >(tee $(out_client_log))
endif

##################################################
# Stop
##################################################
stop:
	-docker-compose -f backend/docker-compose.yml down
	pkill --echo --full 'node.*vite.*serve'
	pkill --echo --full 'docker logs -f*'

##################################################
# Test
##################################################
test: file?=
test: args?=
test: dotenv
	$(loadenv)
	MODE=test $(vitest) run $(file) $(args) | tee $(out_test_log)

##################################################
# run
##################################################
run: file?=tmp/scratch.js
run: dotenv $(file)
	@if [[ "$${file:-}" == "" ]]; then
	echo "Usage: 'make run file [args]'"
	exit 1
	fi
	extension="$${file##*.}"
	$(loadenv)
	case $$extension in
	sh)
	$(SHELL) $(file) $(args)
	;;
	js | mjs)
	$(node) $(file) $(args)
	;;
	*)
	echo "Unrecognized extension: $$extension"
	echo "Failed to 'make $@ $^'"
	;;
	esac

##################################################
# dotenv
##################################################
# | sed -e 's/=([^\'\"]+)/"\1/"'
# sed -e 's/=\([^\x27"].*$$\)/=\x27\1\x27/'
dotenv:
	$(dotenv) $(dotenvflags) $(dotenvdirs) | sort > $(dotenvfile)

##################################################
# clean
##################################################
clean:
	-rm -f $(out_client_log)
	-rm -f $(out_backend_log)
	-rm -f $(out_test_log)
	-rm -f *.tar.gz
	-rm -f $(dotenvfile)
	find $(srcdir_top) -name '*~' -exec rm {} \;


##################################################
# distclean
##################################################
distclean: clean
	-rm -f *.log
	-rm -f .#*
	-rm -rf $(buildir)
	-rm -rf node_modules
	-rm -f package-lock.json
	-rm -f config.*
	-rm -f IN_CONFIG_VITEFILE
	-rm -f IN_CONFIG_INDEXFILE
	-rm -f IN_CONFIG_BACKEND_TOPICSFILE
	-rm -f IN_CONFIG_MAKEFILE
	-rm -f IN_CONFIG_BACKEND_TOPICSFILE

##################################################
# misc
##################################################
.DEFAULT:
	@if [ ! -f "$<" ]; then
	echo "Missing file $${file:-}"
	exit 1
	fi

##################################################
# directories
##################################################
$(buildir_abs):
	mkdir -p $@


##################################################
# help
##################################################
help:
	@cat ./Makefile | grep -i --color=auto 'phony' | cut -d ' ' -f2- | tail --lines=+3

# Software development
.PHONY: run # Read dotenvfile and run $target or tmp/scratch.js
.PHONY: build # Build application
.PHONY: start # Start application
.PHONY: stop # Stop application
.PHONY: test # Test application
# Software distribution
.PHONY: dist # Distribute source tree
.PHONY: deploy # Deploy the application to the consumer, such as a server
# Cleaning
.PHONY: clean # Remove files created by ./make
.PHONY: distclean # Remove files created by ./configure
# Misc
.PHONY: help # Display a short description about each Makefile target's function
.PHONY: dotenv # Write environment into .env
.PHONY: all # Default target

_test:
	echo $(alias_afm)
