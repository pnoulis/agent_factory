* Development workflow
* Git submodules
** superproject configuration
git config --local submodule.recurse true
git config --local status.submodulesummary true
** Adding a git submodule
git submodule add git@github.com:pnoulis/afadmin_utils.git packages/afadmin_utils

--name
the name parameter acts as a reference to the installation path of the
git submodule

** cloning a superproject task list
git submodule update --init --recursive

or

git clone git@... --recurse-submodules

** Keeping a superproject up to date
git pull --recurse-submodules=yes

or if local config contains key value pair:
git config --local --add submodule.recurse true
there is no need to add the --recurse-submodules
parameter in git pull


git pull --recurse-submodules=yes only fetches, it does
not merge the remote revision.

git submodule update --remote

git add .
git commit -m 'submodule A updates'

** Listing all git submodules within a superporject
cat .gitmodules
cat .gitmodules | grep path | awk '{ print $3 }'
git config --file .gitmodules --get-regexp path | awk '{ print $2 }'
* Making use of internally developed programs
** Through npm install, if it is an npm package
npm install git@github.com:pnoulis/package.git

npm update package

The package should adhere to the package/library guidelines

** Through the local filesystem
npm install --workspace=js_utils.
js_utils must be installed first

** By utilizing npm workspaces
Npm packages declared as part of a workspace get linked to the superproject's
root. Another workspace package may reference another workspace package the same
way as it would if it was declared a dependency through npm install.

* Testing ui components
Each ui component should be placed under its own file within the
src/scratch directory tree.


The file should export only 1 default component.
The exported component should be named after the component that is being tested,
prefixed by the word "Scratch".
The <ScratchComponent> file should be named after the component that is being
exported.


One displays the ui component by exporting it from the scratch/current.jsx file
like so:

export { default } from './<ScratchComponent>.jsx'

** example
Given a component named MyComponent found within src/components/myComponents


#+begin_src javascript

  // file -> scr/scratch/ScratchMyComponent.jsx
  import { MyComponent } from '/src/components/myComponents';

  export default function ScratchMyComponent() {
  }

  // file -> src/scratch/current.jsx
  export { default } from './ScratchMyComponent.jsx';

#+end_src

* Tools
** Make
*** Resources
*** Installation on windows
*** Installation on linux
sudo apt install make
*** Updating
*** Configuration
** wsl2
*** Resources
*** Installation on windows
*** Installation on linux
*** Updating
*** Configuration
** Nginx
*** Resources
[[https://nginx.org/en/docs/][nginx documentation]]
*** Installation on windows
*** Installation on linux
sudo apt install nginx
*** Updating
*** Configuration
In order to have nginx serve a single page application that makes use of
client-side routing one must divert all requests to the root index page of the
application.

#+begin_src conf
  # Change this default configuration
  try_files $uri $uri/ =404

  # to
  try_files $uri /index.html

#+end_src
*** Dockerized
**** Official nginx@latest
configuration setup:

/etc/nginx/nginx.conf
/etc/nginx/conf.d/default.conf

default.conf serves: /usr/share/nginx/html/

**** Custom official nginx@latest image

#+begin_src dockerfile
  FROM nginx
#+end_src

#+begin_src nginx
  server {
      listen 80;
      listen [::]:80;
      server_name localhost;
      root /srv/afadmin_client
      index index.html;

      location / {
          try_files $uri /index.html;
      }
  }
#+end_src

** Docker
*** Resources
[[https://docs.docker.com/desktop/][Docker Desktop | Docker Documentation]]
*** Installation on windows
Docker in wsl2 may either be installed:

- Through Docker Desktop for windows
  In which case the installation instructions are the same as the ones listed
  under installing docker on windows.

  Do not forget to enable wsl2
  
- Natively within the virtual linux operating system
  It is recommended to use Docker Desktop for windows

Docker in windows may be used either:

- Through Docker desktop
- By installing individual docker modules, such as docker engine.
  This method consumes less resources but requires extra configuration.

*** Installation on linux
*** Updating
*** Configuration
** Node
*** Resources
*** Installation on windows
*** Installation on linux
*** Updating
*** Configuration
* Running automated wristband scan
requires:
python3
paho-mqtt

run script with python.

Then using mqtt-explorer connect to:

localhost:9001

publish at:

/themaze/registration5/emulateScan/r/r

* Connecting to deployment server
--$ ssh root@78.159.98.244 -p 7822
mindtr@p
** configs working
*** config #1
#+begin_src conf
    server {
    listen 80;
    listen [::]:80;
    server_name localhost;
    root /srv;
    index index.html;

    location /gameplay {
        try_files $uri /gameplay.html;
    }

    location /administration {
        try_files $uri /admin.html;
    }
    location / {
        try_files $uri /index.html;
    }
}
#+end_src

#+begin_src shell
  /srv/gameplay.html
  /srv/admin.html
  /srv/index.html
#+end_src
*** config #2

/srv/gameplay/gameplay.html
/srv/administration/administration.html
/srv/index.html
#+begin_src conf
    server {
    listen 80;
    listen [::]:80;
    server_name localhost;
    root /srv;
    index index.html;

    location /gameplay {
        try_files $uri /gameplay/gameplay.html;
    }

    location /administration {
        try_files $uri /administration/admin.html;
    }
    location / {
        try_files $uri /index.html;
    }
}
#+end_src

*** config #3

However the redirect URL contains the :port

/srv/gameplay/gameplay.html
/srv/administration/administration.html
/srv/index.html
#+begin_src conf
  server {
  listen 80;
  listen [::]:80;
  server_name localhost;
  return 301 $scheme://localhost:9000$request_uri;
  }

  server {
  listen 9000;
  listen [::]:9000;
  server_name localhost;
  root /srv;
  index index.html;

  location /gameplay {
  try_files $uri /gameplay/gameplay.html;
  }

  location /administration {
  try_files $uri /administration/admin.html;
  }
  location / {
  try_files $uri /index.html;
  }

    #+end_src

*** config #4
#+begin_src conf
  server {
  listen 80;
  listen [::]:80;
  server_name localhost;
  root /srv;

  location / {
  proxy_pass $scheme://localhost:9000;
  proxy_buffering off;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-HOST $host;
  proxy_set_header X-Forwarded-PORT $server_port;
  }
  }

  server {
  listen 9000;
  listen [::]:9000;
  server_name localhost;
  root /srv;
  index index.html;

  location /gameplay {
  try_files $uri /gameplay/gameplay.html;
  }

  location /administration {
  try_files $uri /administration/admin.html;
  }
  location / {
  try_files $uri /index.html;
  }
  }
#+end_src
** URI
$uri variable
refers to:

the URI that nginx is currently processing but after normalization.
such as:

- removal of the query string
- consecutive //// characters are condensed to 1 /
- URL encoded characters are decoded
** $request_uri
the original _UNALTERED_ uri

* Building thomas src

** Download yarn
nvm install --global yarn

** Install packages using yarn
yarn --install

** Change node version to v16.20.0 (LTS: Gallium)
change node version to: v16.20.0   (Latest LTS: Gallium)
nvm install --lts=Gallium

nvm --version

if it is v16.20.0 do nothing else
nvm use --lts=Gallium

** Build
NODE_ENVIRONMENT=production npm run build --mode=production

** Build to serve under /gameplay (or any subdirectory)

add property to package.json

"homepage": "/gameplay/",

Then build again
NODE_ENVIRONMENT=production npm run build --mode=production

* Release procedure of individual repositories
* Realese procedure of the monorepo
** creating the release branch
git branch --create release
** switch to release branch
git switch release
** For each submodule switch to the release branch
Must make sure that all submodules including the superproject are clean.


