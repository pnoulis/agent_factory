* About
This file hosts the software requirements specification of the program developed
to satisfy the product agent_factory as described in the product requirements
document.

* Definitions
[[https://en.wikipedia.org/wiki/Software_requirements_specification#SoftwareSystemAttributes][software requirements specification]]
[[https://en.wikipedia.org/wiki/Monorepo][monorepo]]
[[https://git-scm.com/docs/git-submodule][git submodules]]
[[https://docs.npmjs.com/cli/v9/using-npm/workspaces?v=true][npm workspaces]]
[[https://git-scm.com/docs/git-config#Documentation/git-config.txt][git config pair index]]
* System overview
** Directory hierarchy
The Agent_factory directory hosts all programs, configurations, data and other
resources relevant to it. It is itself a git repository that implements the
monorepo pattern, with the help of git submodules and npm workspaces.

*** Programs
The programs hosted within are classified into:

- shared resource programs
  Programs which are dependent on the superproject's configuration or data.
  They make use of the shared resources found within, and are thus more tightly 
  coupled that other programs.
- npm dependencies
  Programs which are managed by the node package manager (npm), can be either
  transient or direct dependencies.
- other dependencies
  Programs which are not dependent on the superproject's configuration or data,
  and are not distributed as an npm package.

**** lib/
hosts other dependencies
**** core/
hosts the agent_factory_machine
**** ui/
hosts the agent_factory front-end clients
**** services/
host services or service dependencies, that are internally developed
**** dbs/
hosts programs related to databases
**** node_modules/
hosts npm packages, not internally developed

*** Shared resources
**** config

*** Submodules

**** tmp
tmp/scratch

** System architecture
afadmin_client -> afmachine(client side) -> backend
*** Wristbands

wristbandMerged = false ->
The player is not part of a team.

wristbandMerged = true ->
The player is part of a team, that may or may not be currently playing

active = true ->
The wristband has been registered to a player.

active = false ->
The wristband has not been registered to a player.

**** Wristband registration
A wristband may be registered to a user if and only if:

- Player is not currently part of a team
- The wristband has not been registered to a player.

A wristband may be unregistered from a user if and only if:

- Player is not currently part of a team
- Player has a registered wristband

*** Model - view - controller (MVC)
**** Model

* System configuration
** git
[[https://git-scm.com/docs/git-config#Documentation/git-config.txt-submodulerecurse][add --recurse-submodules flag on commands that accept it, pull, fetch etc]]
git config --local submodule.recurse true

[[https://git-scm.com/docs/git-config#Documentation/git-config.txt-statussubmoduleSummary][include submodules in summary]]
git config --local status.submodulesummary true

* Development workflow
** Task runner
*** Overview
A task runner is a program created to assist in the development of software.

It is very common to have to run a command many times throughout a development
session.

Commands like, compile, run, and others.

In short, a task runners main features include:

- The definition of tasks in arbitrary languages
  
  task_runner compile -> python do_something
  task_runner compile -> node do_something
  
- Accept arguments to tasks
  
  task_runner compile --only-changed a b c...
  
- Persistence of tasks and developer experience
  
  Tasks should be defined through a text-only file
  with readability and ease of usage in mind.

  
*** Make
Make is a build system automation tool but it also functions as a task runner if
some patterns devised by the community are employed.

Make utilizes a domain specific language for defining tasks and a file named
*Makefile*.

For example:

#+begin_src makefile
  # Given the Makefile
  .PHONY: compile

  compile:
    node src/main.jsx
#+end_src

#+begin_src shell
  # Runs the compile task, also called a target
  make compile
#+end_src


*** Standard targets

**** make

Same as calling, make help

**** make help

List the available targets along with a description.

**** make run

Tries to run a file as if it was an executable.

#+begin_src shell
  params=./src/myfile.js make run
#+end_src


So executing the command, given the following Makefile
results in the execution of ./src/myfile.js by node.

#+begin_src makefile
  run:
    node $(params)
#+end_src

**** make scratch

Runs the file located at tmp/scratch[.ext]

#+begin_src shell
  make scratch
#+end_src

**** make build

The term 'to build' is very overloaded. It mostly means to have your project in
such a state so that it may be utilized.

Stated differently:

The build process end result must provide a way for others to use it as a single
thing.

- If that was a C program, after building one must be able to ->
  ./c_program

- If that was a library, after building one must be able to ->
  #include  ./lib

- If that was a front-end app after building one must be able to ->
  serve ./dir

Any action taken to achieve that stated goal, is part of the build process,
which depending on the nature of the project may vary wildly.

The make target build however should not be used to define the build procedur
The make target build should be used to define the build procedure, whatever
that means for each specific project.

make build is a link. It does not itself execute a task but rather delegates the
task to more specific build targets.

By default the build target it links to is build-prod.

#+begin_src shell
  # actually calls build-prod
  make build
#+end_src

**** make dev

**** make clean

**** make test

**** make lint

**** make fmt

**** make env
