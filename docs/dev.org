* Issue new Makefile that makes use of new DOTENV for each submodule
** DONE mqtt_proxy
CLOSED: [2023-07-04 Tue 21:41]
** DONE refactor_afmachine
CLOSED: [2023-07-04 Tue 21:55]

** DONE js_utils
CLOSED: [2023-07-04 Tue 22:03]
** DONE react_utils
CLOSED: [2023-07-04 Tue 22:03]
** DONE refactor.afadmin_client
CLOSED: [2023-07-04 Tue 22:03]
* Write scripts that make use of the serviceBackend API for testing and development purposes
** DONE environment loading
CLOSED: [2023-07-09 Sun 09:07]
The scripts depend on services which read the environment at runtime. As such if
the expected symbols are not defined at the appointed location they are unable
to initialize and fail.
** DONE registerPlayers
CLOSED: [2023-07-10 Mon 09:08]
** DONE registerWristbands
CLOSED: [2023-07-10 Mon 09:08]
** DONE registerTeams
CLOSED: [2023-07-10 Mon 09:08]
** DONE addPackage
CLOSED: [2023-07-10 Mon 09:08]
** DONE startTeam
CLOSED: [2023-07-10 Mon 09:08]
* Write a script that resets the backend database for testing and development purposes
** DONE flushBackendDB
CLOSED: [2023-07-10 Mon 09:08]

* DONE Transfer emulateScan to scripts/
CLOSED: [2023-07-10 Mon 19:11]

* DONE Rudimentary tests all api calls
CLOSED: [2023-07-10 Mon 20:50]
** DONE infoWristband
CLOSED: [2023-07-10 Mon 19:58]
** DONE listTeams
CLOSED: [2023-07-10 Mon 20:05]
** DONE loginPlayer
CLOSED: [2023-07-10 Mon 20:13]
** DONE searchPlayer
CLOSED: [2023-07-10 Mon 20:20]
** DONE mergeGroupTeam
CLOSED: [2023-07-10 Mon 20:37]
** DONE subscribeWristbandScan
CLOSED: [2023-07-10 Mon 20:50]


* TODO Afmachine
The afmachine is a superclass holding multiple objects.
It basically extends the BackendService.
** DONE Move pipeline to js_utils
CLOSED: [2023-07-11 Tue 09:33]

** DONE Rename afmachine/src/afmachine to afmachine/src/entities
CLOSED: [2023-07-11 Tue 09:45]

** DONE Check environment is loaded at afmachine
CLOSED: [2023-07-11 Tue 10:10]

** TODO Import backend service and logger service
** TODO Different pairing definition
* LOG 17/07/23
** Player registration
* LOG 18/07/23
sessionId
slaves
clientId


* LOG 19/07/23
** registerUser
** Form error handling
In case of validation errors the form should display a message one for each of the
perpetrator fields displayed beneath the field itself.
** Routes input/output standardaziation
*** Route input

#+begin_src js

  // All routes at invocation time are designed to receive a variable number of arguments.
  function route(...args) {};

  // At which point the route shall construct a new context object.
  const context = {
    args,
    req: {},
    res: {},
  }

  // And pass it along the middleware chain, where each middleware will most propably
  // perform its own mutations to the context object.

#+end_src

*** Creating the request object
#+begin_src js

  // The first middleware of each route pipeline parses its argument list into the
  // proper request object.

  /* Example

     Consider the case where the registerPlayer() route is provided with the following
     arguments:

     Afmachine.registerPlayer({username: "oetuheontuh"}, options);

     The Route instance shall create the following context object:
  ,*/

  const context = {
    args = [ { username: "toehuneotuh", }, options ]
    req: {},
    res: {},
  }

  /*
    The first middleware responsible for parsing the arguments will proceed to
    mutate the context object in a similar fashion:
  ,*/

  function constructRequestObject(context, next) {
    const [request = {}, options = {}] = context.args;
    context.req = {
      timestamp: Date.now(),
      username: request?.username || "",
      surname: request?.surname || "",
      name: request?.name || "",
      email: request?.email || "",
      password: request?.password || "",
    }
    await next();
  }

#+end_src

*** Creating the response object
#+begin_src js

  // Following from the player example of the previous heading

  // Given the response

  const { result = "OK", timestamp: 123434324, player = { username: 'oethuen', ...props }, } = backendService.registerPlayer();

  // The following middleware shall mutate it to:

  function constructResponseObject(context, next) {
    context.res.payload = {
      msg: `Registered player ${player.username}`;
      data: {
        name: player?.name,
        surname: player?.surname,
        username: player?.username,
        email: player?.email,
      }
    }
  }

#+end_src
*** Route output
#+begin_src js

  // At the end of the middleware pipeline the result shall be
  // either a thrown exception or a portion of the context object


  // For example, given the following context object at the end of a pipeline
  const context = {
    args: [player, options],
    req: {
      timestamp: 123424,
      username: 'yolo',
      ...props,
    }
    res: {
      result: "OK",
      timestamp: 1234234,
      player: {
        username: 'yolo',
        ...props
      }
      payload: {
        msg: "registered player yolo",
        data: {
          username: 'yolo',
          ...props,
        }
      }
    }
  }

  // The output of the pipeline shall be:

  const output = {
    route: "/register/player",
    req,
    res: {
      msg: "registered player yolo",
      data: {
        username: "yolo",
        ...props,
      }
    }
  }


#+end_src


* LOG 20/07/23
** DONE test route registerPlayer
CLOSED: [2023-07-20 Thu 10:32]
** DONE test route searchPlayer
CLOSED: [2023-07-20 Thu 10:32]
** TODO ComboboxSearchPlayer
